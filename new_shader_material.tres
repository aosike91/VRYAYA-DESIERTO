[gd_resource type="ShaderMaterial" load_steps=5 format=3 uid="uid://dg3c0ku37dqo6"]

[ext_resource type="Texture2D" uid="uid://c5e0femlblgp1" path="res://Texturas/arena.jpg" id="1_bugmn"]
[ext_resource type="Texture2D" uid="uid://b15e5lq0o4bp5" path="res://addons/desierto/godot_desert-main/assets/textures/terrain/Ground_orm.png" id="2_et32n"]
[ext_resource type="Texture2D" uid="uid://df1ee7xhxpwcj" path="res://addons/desierto/godot_desert-main/assets/textures/terrain/Ground_normal.png" id="3_hi2as"]

[sub_resource type="Shader" id="Shader_n3ivs"]
code = "shader_type spatial;

render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_burley, specular_schlick_ggx, world_vertex_coords;

uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color;

uniform float specular;
uniform float metallic;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);

uniform sampler2D texture_roughness : hint_default_white;
uniform vec4 roughness_texture_channel;

uniform sampler2D texture_normal : hint_normal;
uniform float normal_scale : hint_range(-16,16);

uniform sampler2D texture_ambient_occlusion : hint_default_white;
uniform vec4 ao_texture_channel;
uniform float ao_light_affect;

uniform float uv1_blend_sharpness;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;

uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

varying vec3 uv1_triplanar_pos;
varying vec3 uv1_power_normal;

void vertex() {
	TANGENT = vec3(0.0, 0.0, -1.0) * abs(NORMAL.x);
	TANGENT += vec3(1.0, 0.0, 0.0) * abs(NORMAL.y);
	TANGENT += vec3(1.0, 0.0, 0.0) * abs(NORMAL.z);
	TANGENT = normalize(TANGENT);

	BINORMAL = vec3(0.0, 1.0, 0.0) * abs(NORMAL.x);
	BINORMAL += vec3(0.0, 0.0, -1.0) * abs(NORMAL.y);
	BINORMAL += vec3(0.0, 1.0, 0.0) * abs(NORMAL.z);
	BINORMAL = normalize(BINORMAL);

	uv1_power_normal = pow(abs(NORMAL), vec3(uv1_blend_sharpness));
	uv1_power_normal /= dot(uv1_power_normal, vec3(1.0));

	uv1_triplanar_pos = VERTEX * uv1_scale + uv1_offset;
	uv1_triplanar_pos *= vec3(1.0, -1.0, 1.0); // flip Y
}

vec4 triplanar_texture(sampler2D p_sampler, vec3 p_weights, vec3 p_triplanar_pos) {
	vec4 samp = vec4(0.0);
	samp += texture(p_sampler, p_triplanar_pos.xy) * p_weights.z;
	samp += texture(p_sampler, p_triplanar_pos.xz) * p_weights.y;
	samp += texture(p_sampler, p_triplanar_pos.zy * vec2(-1.0, 1.0)) * p_weights.x;
	return samp;
}

void fragment() {
	vec4 albedo_tex = triplanar_texture(texture_albedo, uv1_power_normal, uv1_triplanar_pos);
	ALBEDO = albedo.rgb * albedo_tex.rgb;

	METALLIC = metallic;

	float roughness_tex = dot(
		triplanar_texture(texture_roughness, uv1_power_normal, uv1_triplanar_pos),
		roughness_texture_channel
	);
	ROUGHNESS = 0.7;

	SPECULAR = specular;

	NORMAL_MAP = triplanar_texture(texture_normal, uv1_power_normal, uv1_triplanar_pos).rgb;
	NORMAL_MAP_DEPTH = normal_scale;

	AO = dot(
		triplanar_texture(texture_ambient_occlusion, uv1_power_normal, uv1_triplanar_pos),
		ao_texture_channel
	);
	AO_LIGHT_AFFECT = ao_light_affect;

	// === Soporte para LightmapGI ===
	#ifdef LIGHTMAP
		vec3 lightmap_color = texture(LIGHTMAP, UV2).rgb;
		ALBEDO *= lightmap_color;
	#endif
}
"

[resource]
render_priority = 0
shader = SubResource("Shader_n3ivs")
shader_parameter/albedo = Color(1, 1, 1, 1)
shader_parameter/specular = 1.0
shader_parameter/metallic = 0.0
shader_parameter/roughness = 1.0
shader_parameter/point_size = 0.0
shader_parameter/roughness_texture_channel = null
shader_parameter/normal_scale = 1.0
shader_parameter/ao_texture_channel = null
shader_parameter/ao_light_affect = 0.0
shader_parameter/uv1_blend_sharpness = 4.0
shader_parameter/uv1_scale = Vector3(0.2, 0.2, 0.2)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(0, 0, 0)
shader_parameter/uv2_offset = Vector3(0, 0, 0)
shader_parameter/texture_albedo = ExtResource("1_bugmn")
shader_parameter/texture_roughness = ExtResource("2_et32n")
shader_parameter/texture_normal = ExtResource("3_hi2as")
shader_parameter/texture_ambient_occlusion = ExtResource("2_et32n")
